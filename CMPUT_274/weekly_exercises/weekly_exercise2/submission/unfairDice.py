# ---------------------------------------------------
#   Name : Chengxuan Li
#   ID: 1631060
#   CMPUT 274, Fall 2020
#
#   Exercise 2: Unfair Dice
# ---------------------------------------------------


from random import random, seed


def biased_rolls(prob_list, s, n):
    """ Simulate n rolls of a biased m- sided die and return
    a list containing the results.

    Arguments :
        prob_list : a list of the probabilities of rolling the
                    number on each side of the m- sided die . The list
                    will always have the length m (m >= 2) , where m is
                    the number of sides numbered 1 to m. Therefore ,
                    for example , the probability stored at index 0 in
                    the list is the probability of rolling a 1 on
                    the m- sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return :
        rolls : a list (of length n) containing each of the n rolls of the
                biased die , in the order they were generated .
    """

    seed(s)
    rolls = []  # List that contains the result from n rolls

    # Collect the result from n rolls
    for i in range(n):
        rnd = random()
        total_weight = 0  # Lower bound of probability region for a dice's side
        for num, prob in enumerate(prob_list):
            if rnd < prob + total_weight:
                rolls.append(num + 1)
                break
            total_weight += prob
            
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m- sided die
    mapped to a fixed width .
    
    Arguments :
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram , in characters
                     (this is the length of the longest bar in the
                     histogram , to maximize space in the chart)
    
    Returns :
        None (but prints the histogram to standard output)
    """
    
    counts = [rolls.count(i+1) for i in range(m)]  # List that contains the frequency of each side of a dice

    # Draw the histogram
    print("Frequency Histogram: %d-sided Die" % m)
    for num, count in enumerate(counts):
        # number of pound based on given width / scale and the frequency
        pound = round(count * (width / max(counts)))
        print("%d.%s" % (num, "#"*pound+"-"*(width-pound)))


if __name__ == "__main__":
    # Built-in test cases

    print(biased_rolls([1/4 , 1/6 , 1/12 , 1/12 , 1/4 , 1/6] , 42, 200))
    draw_histogram(4, [3, 2, 1, 2, 2, 3, 4, 4, 3, 3], 4)
    draw_histogram(4, [3, 2, 1, 2, 2, 3, 4, 4, 3, 3], 25)

